{"version":3,"sources":["ProjectsSource.js"],"names":[],"mappings":"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","file":"ProjectsSource-compiled.js","sourcesContent":["import axios from 'axios';\nimport actions from '../actions/ProjectsActions';\nimport formactions from '../actions/ProjectsFormActions';\n\nconst ProjectsSource = () => {\n    return {\n        fetch: {\n\n            remote(state) {\n                var type = null;\n                switch(type) {\n                    case 'authority':\n                        return axios.get('/api/v1/authorities/projects');\n                    default:\n                        return axios.get('/api/v1/projects');\n                }\n\n            },\n\n            // this function checks in our local cache first\n            // if the value is present it'll use that instead (optional).\n            // local(state) {\n            //     return state.authorities ? state.authorities : null;\n            // },\n\n            // here we setup some actions to handle our response\n            //loading: actions.loadingResults, // (optional)\n            success: actions.updateProjects, // (required)\n            error: actions.errorProjects, // (required)\n\n            // should fetch has precedence over the value returned by local in determining whether remote should be called\n            // in this particular example if the value is present locally it would return but still fire off the remote request (optional)\n            shouldFetch(state) {\n                return true\n            }\n        },\n\n        users: {\n\n            remote(state) {\n                if (state.current.project) {\n                    return axios.get('/api/v1/projects/' + state.current.project.id + '/users');\n                }\n\n            },\n\n            // local(state) {\n            //     return state.authorities ? state.authorities : null;\n            // },\n\n            // here we setup some actions to handle our response\n            //loading: actions.loadingResults, // (optional)\n            success: actions.updateUsers, // (required)\n            error: actions.errorUsers, // (required)\n\n            // should fetch has precedence over the value returned by local in determining whether remote should be called\n            // in this particular example if the value is present locally it would return but still fire off the remote request (optional)\n            shouldFetch(state) {\n                return true\n            }\n        },\n        addUser: {\n\n            remote(state) {\n                return axios.put('/api/v1/projects/' + state.current.project.id, {'action':'add','users':[state.addUserToProject.id]});\n            },\n\n            success: actions.updateAddUser, // (required)\n            error: actions.errorAddUser, // (required)\n\n            shouldFetch(state) {\n                return true\n            }\n        },\n        removeUser: {\n\n            remote(state) {\n                return axios.put('/api/v1/projects/' + state.current.project.id, {'action':'remove','users':[state.removeUserFromProject.id]});\n            },\n\n            success: actions.updateRemoveUser, // (required)\n            error: actions.errorRemoveUser, // (required)\n\n            shouldFetch(state) {\n                return true\n            }\n        },\n\n        deleteSlice: {\n\n            remote(state) {\n                return axios.delete('/api/v1/slices/' + state.deleteSliceFromProject.id);\n            },\n\n            success: actions.updateDeleteSlice, // (required)\n            error: actions.errorDeleteSlice, // (required)\n\n            shouldFetch(state) {\n                return true\n            }\n        },\n\n        slices: {\n\n            remote(state) {\n                if (state.current.project) {\n                    return axios.get('/api/v1/projects/' + state.current.project.id + '/slices');\n                }\n\n            },\n\n            // local(state) {\n            //     return state.authorities ? state.authorities : null;\n            // },\n\n            // here we setup some actions to handle our response\n            //loading: actions.loadingResults, // (optional)\n            success: actions.updateSlices, // (required)\n            error: actions.errorSlices, // (required)\n\n            // should fetch has precedence over the value returned by local in determining whether remote should be called\n            // in this particular example if the value is present locally it would return but still fire off the remote request (optional)\n            shouldFetch(state) {\n                return true\n            }\n        },\n\n        deleteProject: {\n\n            remote(state) {\n                return axios.delete('/api/v1/projects/' + state.deleteProj.id);\n            },\n\n            success: actions.updateDeleteProject, // (required)\n            error: actions.errorDeleteProject, // (required)\n\n            shouldFetch(state) {\n                return true\n            }\n        },\n\n        submit: {\n            // remotely fetch something (required)\n            remote(state) {\n                var v = 'public';\n                if (state.v_public) v = 'public';\n                if (state.v_protected) v = 'protected';\n                if (state.v_private) v = 'private';\n                return axios.post('/api/v1/projects', {\n                        'label': state.label,\n                        'name':  state.name,\n                        'authority': state.authority,\n                        'visibility': v,\n                        'url': state.url,\n                        'description': state.description,\n                        'start_date': state.start_date,\n                        'end_date': state.end_date,\n                    });\n            },\n\n            // this function checks in our local cache first\n            // if the value is present it'll use that instead (optional).\n            // local(state) {\n            //     return state.authorities ? state.authorities : null;\n            // },\n\n            // here we setup some actions to handle our response\n            //loading: actions.loading, // (optional)\n            success: formactions.submitSuccess, // (required)\n            error: formactions.submitError, // (required)\n\n            // should fetch has precedence over the value returned by local in determining whether remote should be called\n            // in this particular example if the value is present locally it would return but still fire off the remote request (optional)\n            shouldFetch(state) {\n                return true\n            }\n        }\n    }\n};\n\nexport default ProjectsSource;\n\n"]}