#!/usr/bin/env python3.5

'''
    MySlice Sync service

    This service will run multiple threads responsible for keeping the db in sync
    with the remote endpoints APIs and managing service activity
    
    (c) 2016, 2017 Ciro Scognamiglio <ciro.scognamiglio@lip6.fr>
'''

import signal
import multiprocessing

import myslice.db as db
from myslice import config
import myslice.lib.log as logging

# workers
from myslice.web.server import run as serviceWeb
from myslice.services.activity import run as serviceActivity
from myslice.services.authorities import run as serviceAuthorities
from myslice.services.experiments import run as serviceExperiments
from myslice.services.users import run as serviceUsers
from myslice.services.emails import run as serviceEmails
from myslice.services.leases import run as serviceLeases

logger = logging.getLogger()

def receive_signal(signum, stack):
    logger.info('Received signa l %s', signum)
    raise SystemExit('Exiting')



if __name__ == '__main__':

    signal.signal(signal.SIGINT, receive_signal)
    signal.signal(signal.SIGTERM, receive_signal)
    signal.signal(signal.SIGHUP, receive_signal)

    logger.info("starting myslice-server")

    ##
    # Setup DB (Rethinkdb)
    db.setup()

    ##
    # Available services
    services = {
        "web" : serviceWeb,
        "emails" : serviceEmails,
        "activity" : serviceActivity,
        "authorities" : serviceAuthorities,
        "users" : serviceUsers,
        "experiments" : serviceExperiments,
        "leases" : serviceLeases
    }

    ##
    # Running processes
    processes = []

    ##
    # Start enabled processes
    for process_name, process_config in config.services.items():
        if process_name in services:
            if process_config["enabled"]:
                logger.info("service {} starting".format(process_name))
                p = multiprocessing.Process(target=services[process_name])
                processes.append(p)
                p.daemon = True
                p.start()
            else:
                logger.info("service {} not enabled".format(process_name))
        else:
            logger.info("service {} not known, ignoring".format(process_name))

    for proc in processes:
        proc.join()
