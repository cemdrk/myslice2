#!/usr/bin/env python3.5

'''
    MySlice Sync service

    This service will run multiple threads responsible for keeping the db in sync
    with the remote endpoints APIs
    
    (c) 2016 Ciro Scognamiglio <ciro.scognamiglio@lip6.fr>
'''

import signal
import logging
import multiprocessing

import myslice.db as db

# workers
from myslice.services.activity import run as serviceActivity
from myslice.services.authorities import run as serviceAuthorities
from myslice.services.experiments import run as serviceExperiments
from myslice.services.users import run as serviceUsers
from myslice.services.emails import run as serviceEmails
from myslice.services.leases import run as serviceLeases

logger = logging.getLogger("myslice-sync")

def receive_signal(signum, stack):
    logger.info('Received signa l %s', signum)
    raise SystemExit('Exiting')



if __name__ == '__main__':

    signal.signal(signal.SIGINT, receive_signal)
    signal.signal(signal.SIGTERM, receive_signal)
    signal.signal(signal.SIGHUP, receive_signal)

    logger.info("Starting myslice-server")

    """
    Setup DB (Rethinkdb)
    """
    db.setup()

    processes = []

    ##
    # Process: activity
    #
    p = multiprocessing.Process(target=serviceActivity)
    processes.append(p)
    p.daemon = True
    p.start()

    ##
    # Process: experiments
    #
    p = multiprocessing.Process(target=serviceExperiments)
    processes.append(p)
    p.daemon = True
    p.start()

    ###
    #  Process : leases
    ##
    p = multiprocessing.Process(target=serviceLeases)
    processes.append(p)
    p.daemon = True
    p.start()

    ##
    #Process: users
    #
    p = multiprocessing.Process(target=serviceUsers)
    processes.append(p)
    p.daemon = True
    p.start()

    ##
    #Process: authorities
    #
    p = multiprocessing.Process(target=serviceAuthorities)
    processes.append(p)
    p.daemon = True
    p.start()

    ##
    #Process: emails
    #
    p = multiprocessing.Process(target=serviceEmails)
    processes.append(p)
    p.daemon = True
    p.start()

    for proc in processes:
        proc.join()
