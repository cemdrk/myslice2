#!/usr/bin/env python3.5

'''
    MySlice Live service

    This service will run multiple threads responsible for watching for changes
    to rethinkdb and broadcast to connected clients with ZeroMQ

    check more info: 
    http://zguide.zeromq.org/php:chapter5
    https://github.com/zeromq/pyzmq/blob/master/examples/pubsub/
    https://pyzmq.readthedocs.io/en/latest/api/index.html
    
    (c) 2016 Ciro Scognamiglio <ciro.scognamiglio@lip6.fr>
'''

import logging
import json
import signal
import threading
import zmq
from queue import Queue

from pprint import pprint

from zmq.utils.strtypes import asbytes

from myslice.lib.util import myJSONEncoder
from myslice.db import connect, changes, tables

logger = logging.getLogger("myslice-live")

def receive_signal(signum, stack):
    logger.info('Received signal %s', signum)
    raise SystemExit('Exiting')

def watch(table, q):
    dbconnection = connect()

    logger.info("watching changes on {}".format(table))

    # Watch for changes on the activity table and send the event/request
    feed = changes(dbconnection, table=table)
    for c in feed:
        table = asbytes(table)
        serialized_c = asbytes(json.dumps(c['new_val'], ensure_ascii=False, cls=myJSONEncoder))
        q.put([ table, serialized_c ])

if __name__ == '__main__':

    signal.signal(signal.SIGINT, receive_signal)
    signal.signal(signal.SIGTERM, receive_signal)
    signal.signal(signal.SIGHUP, receive_signal)

    # setup ZeroMQ PUB socket
    try:
        context = zmq.Context()
        sock = context.socket(zmq.PUB)
        sock.bind('tcp://127.0.0.1:6001')
        #sync()

        # setup the Queue
        q = Queue()
        # spawn one thread for each table
        watchers = []
        for table in tables:
            t = threading.Thread(target=watch, args=(table['name'], q,))
            t.daemon = True
            watchers.append(t)
            t.start()

        # receive changes from the queue and broadcast it through the zmq socket
        while True:
            r = q.get()
            sock.send_multipart(r)
            
    
    except SystemExit:
        # clean up
        sock.close()
        context.term()
