#!/usr/bin/env python3.5
import pika
import signal
import time

from multiprocessing import Process

def start_queue():
    channel.queue_declare(queue='hello')


def publish():
    channel.basic_publish(exchange='',
                          routing_key='hello',
                          body='Hello World!')
    print(" [x] Sent 'Hello World!'")

def subscribe():
    channel.basic_consume(callback,
                      queue='hello',
                      no_ack=True)
    channel.start_consuming()

def callback(ch, method, properties, body):
    print(" [x] Received %r" % body)

def receive_signal(signum, stack):
    print('Received signal %s', signum)
    raise SystemExit('Exiting')

if __name__ == '__main__':

    signal.signal(signal.SIGINT, receive_signal)
    signal.signal(signal.SIGTERM, receive_signal)
    signal.signal(signal.SIGHUP, receive_signal)

    try:
        connection = pika.BlockingConnection(pika.ConnectionParameters(
                   'localhost'))
        channel = connection.channel()
        start_queue()
        consumer_process = Process(target=subscribe)
        consumer_process.start()
        while True:
            publish()
            time.sleep(10)

        connection.close()
    except Exception as e:
        import traceback
        traceback.print_exc()
